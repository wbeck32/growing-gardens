"use strict";
/*!
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@google-cloud/common");
const promisify_1 = require("@google-cloud/promisify");
const arrify = require("arrify");
const extend = require("extend");
const is = require("is");
const isHtml = require('is-html');
const teeny_request_1 = require("teeny-request");
const PKG = require('../../package.json');
/**
 * With [Google Translate](https://cloud.google.com/translate), you can
 * dynamically translate text between thousands of language pairs.
 *
 * The Google Translate API lets websites and programs integrate with Google
 * Translate programmatically.
 *
 * @class
 *
 * @see [Getting Started]{@link https://cloud.google.com/translate/v2/getting_started}
 * @see [Identifying your application to Google]{@link https://cloud.google.com/translate/v2/using_rest#auth}
 *
 * @param {ClientConfig} [options] Configuration options.
 *
 * @example
 * //-
 * // <h3>Custom Translate API</h3>
 * //
 * // The environment variable, `GOOGLE_CLOUD_TRANSLATE_ENDPOINT`, is honored as
 * // a custom backend which our library will send requests to.
 * //-
 *
 * @example <caption>include:samples/quickstart.js</caption>
 * region_tag:translate_quickstart
 * Full quickstart example:
 */
class Translate extends common_1.Service {
    constructor(options) {
        let baseUrl = 'https://translation.googleapis.com/language/translate/v2';
        if (process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT) {
            baseUrl = process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT.replace(/\/+$/, '');
        }
        const config = {
            baseUrl,
            scopes: ['https://www.googleapis.com/auth/cloud-platform'],
            packageJson: require('../../package.json'),
            projectIdRequired: false,
            requestModule: teeny_request_1.teenyRequest,
        };
        super(config, options);
        this.options = options || {};
        this.options.request = config.requestModule;
        if (this.options.key) {
            this.key = this.options.key;
        }
    }
    /**
     * Detect the language used in a string or multiple strings.
     *
     * @see [Detect Language]{@link https://cloud.google.com/translate/v2/using_rest#detect-language}
     *
     * @param {string|string[]} input - The source string input.
     * @param {DetectCallback} [callback] Callback function.
     * @returns {Promise<DetectResponse>}
     *
     * @example
     * const {Translate} = require('@google-cloud/translate');
     *
     * const translate = new Translate();
     *
     * //-
     * // Detect the language from a single string input.
     * //-
     * translate.detect('Hello', (err, results) => {
     *   if (!err) {
     *     // results = {
     *     //   language: 'en',
     *     //   confidence: 1,
     *     //   input: 'Hello'
     *     // }
     *   }
     * });
     *
     * //-
     * // Detect the languages used in multiple strings. Note that the results are
     * // now provided as an array.
     * //-
     * translate.detect([
     *   'Hello',
     *   'Hola'
     * ], (err, results) => {
     *   if (!err) {
     *     // results = [
     *     //   {
     *     //     language: 'en',
     *     //     confidence: 1,
     *     //     input: 'Hello'
     *     //   },
     *     //   {
     *     //     language: 'es',
     *     //     confidence: 1,
     *     //     input: 'Hola'
     *     //   }
     *     // ]
     *   }
     * });
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * translate.detect('Hello').then((data) => {
     *   const results = data[0];
     *   const apiResponse = data[2];
     * });
     *
     * @example <caption>include:samples/translate.js</caption>
     * region_tag:translate_detect_language
     * Here's a full example:
     */
    detect(input, callback) {
        const inputIsArray = Array.isArray(input);
        input = arrify(input);
        this.request({
            method: 'POST',
            uri: '/detect',
            json: {
                q: input,
            },
        }, (err, resp) => {
            if (err) {
                callback(err, null, resp);
                return;
            }
            let results = resp.data.detections.map((detection, index) => {
                const result = extend({}, detection[0], {
                    input: input[index],
                });
                // Deprecated.
                // tslint:disable-next-line no-any
                delete result.isReliable;
                return result;
            });
            if (input.length === 1 && !inputIsArray) {
                results = results[0];
            }
            callback(null, results, resp);
        });
    }
    /**
     * Get an array of all supported languages.
     *
     * @see [Discovering Supported Languages]{@link https://cloud.google.com/translate/v2/discovering-supported-languages-with-rest}
     *
     * @param {string} [target] Get the language names in a language other than
     *     English.
     * @param {GetLanguagesCallback} [callback] Callback function.
     * @returns {Promise<GetLanguagesResponse>}
     *
     * @example <caption>include:samples/translate.js</caption>
     * region_tag:translate_list_codes
     * Gets the language names in English:
     *
     * @example <caption>include:samples/translate.js</caption>
     * region_tag:translate_list_language_names
     * Gets the language names in a language other than English:
     */
    getLanguages(targetOrCallback, callback) {
        let target;
        if (is.fn(targetOrCallback)) {
            callback = targetOrCallback;
            target = 'en';
        }
        else {
            target = targetOrCallback;
        }
        const reqOpts = {
            uri: '/languages',
            useQuerystring: true,
            qs: {},
        };
        if (target && is.string(target)) {
            reqOpts.qs.target = target;
        }
        this.request(reqOpts, (err, resp) => {
            if (err) {
                callback(err, null, resp);
                return;
            }
            const languages = resp.data.languages.map((language) => {
                return {
                    code: language.language,
                    name: language.name,
                };
            });
            callback(null, languages, resp);
        });
    }
    /**
     * Translate a string or multiple strings into another language.
     *
     * @see [Translate Text](https://cloud.google.com/translate/v2/using_rest#Translate)
     *
     * @throws {Error} If `options` is provided as an object without a `to`
     *     property.
     *
     * @param {string|string[]} input The source string input.
     * @param {string|TranslateRequest} [options] If a string, it is interpreted as the
     *     target ISO 639-1 language code to translate the source input to. (e.g.
     *     `en` for English). If an object, you may also specify the source
     *     language.
     * @param {TranslateCallback} [callback] Callback function.
     * @returns {Promise<TranslateResponse>}
     *
     * @example
     * //-
     * // Pass a string and a language code to get the translation.
     * //-
     * translate.translate('Hello', 'es', (err, translation) => {
     *   if (!err) {
     *     // translation = 'Hola'
     *   }
     * });
     *
     * //-
     * // The source language is auto-detected by default. To manually set it,
     * // provide an object.
     * //-
     * const options = {
     *   from: 'en',
     *   to: 'es'
     * };
     *
     * translate.translate('Hello', options, (err, translation) => {
     *   if (!err) {
     *     // translation = 'Hola'
     *   }
     * });
     *
     * //-
     * // Translate multiple strings of input. Note that the results are
     * // now provided as an array.
     * //-
     * const input = [
     *   'Hello',
     *   'How are you today?'
     * ];
     *
     * translate.translate(input, 'es', (err, translations) => {
     *   if (!err) {
     *     // translations = [
     *     //   'Hola',
     *     //   'Como estas hoy?'
     *     // ]
     *   }
     * });
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * translate.translate('Hello', 'es').then((data) => {
     *   const translation = data[0];
     *   const apiResponse = data[1];
     * });
     *
     * @example <caption>include:samples/translate.js</caption>
     * region_tag:translate_translate_text
     * Full translation example:
     *
     * @example <caption>include:samples/translate.js</caption>
     * region_tag:translate_text_with_model
     * Translation using the premium model:
     */
    translate(inputs, optionsOrTo, callback) {
        const inputIsArray = Array.isArray(inputs);
        const input = arrify(inputs);
        let options = {};
        if (typeof optionsOrTo === 'object') {
            options = optionsOrTo;
        }
        else if (typeof optionsOrTo === 'string') {
            options = { to: optionsOrTo };
        }
        // tslint:disable-next-line no-any
        const body = {
            q: input,
            format: options.format || (isHtml(input[0]) ? 'html' : 'text'),
        };
        if (is.string(options)) {
            body.target = options;
        }
        else {
            if (options.from) {
                body.source = options.from;
            }
            if (options.to) {
                body.target = options.to;
            }
            if (options.model) {
                body.model = options.model;
            }
        }
        if (!body.target) {
            throw new Error('A target language is required to perform a translation.');
        }
        this.request({
            method: 'POST',
            uri: '',
            json: body,
        }, (err, resp) => {
            if (err) {
                callback(err, null, resp);
                return;
            }
            let translations = resp.data.translations.map((x) => x.translatedText);
            if (body.q.length === 1 && !inputIsArray) {
                translations = translations[0];
            }
            callback(err, translations, resp);
        });
    }
    /**
     * A custom request implementation. Requests to this API may optionally use an
     * API key for an application, not a bearer token from a service account. This
     * means it is possible to skip the `makeAuthenticatedRequest` portion of the
     * typical request lifecycle, and manually authenticate the request here.
     *
     * @private
     *
     * @param {object} reqOpts - Request options that are passed to `request`.
     * @param {function} callback - The callback function passed to `request`.
     */
    request(reqOpts, callback) {
        if (!this.key) {
            super.request(reqOpts, callback);
            return;
        }
        reqOpts.uri = this.baseUrl + reqOpts.uri;
        reqOpts = extend(true, {}, reqOpts, {
            qs: {
                key: this.key,
            },
            headers: {
                'User-Agent': common_1.util.getUserAgentFromPackageJson(PKG),
            },
        });
        common_1.util.makeRequest(reqOpts, this.options, callback);
    }
}
exports.Translate = Translate;
/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
promisify_1.promisifyAll(Translate, { exclude: ['request'] });
//# sourceMappingURL=index.js.map